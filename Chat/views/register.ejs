<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="styleLogin.css">
    <link
      crossorigin="anonymous"
      integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3"
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.1.3/css/bootstrap.min.css">

    <title>Register</title>
  </head>
  <body>
    <div class="error"></div>
    <div class="sidebar"></div>
    <div class="content">
    <h1>Register</h1>
    <form>
      <div class="error" style="background-color: red;"></div>
      <br />
      <label for="username">Username</label><br />
      <input type="text" id="username" required /><br />
      <label for="password">Password</label><br />
      <input type="password" id="password" required /><br />
      <input type="submit" value="register" /><br />

      <!-- hidden double-sumbit CSRF token field -->
      <input type="hidden" name="CSRFToken" id="CSRFToken">

    </form>
    <br></br>
    <a href="/login">Already registered? Login here</a>

    <script 
      crossorigin="anonymous"
      integrity="sha384-S3wQ/l0OsbJoFeJC81UIr3JOlx/OzNJpRt1bV+yhpWQxPAahfpQtpxBSfn+Isslc"
      type="text/javascript" 
      src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js">
    </script>
    <script 
      src="https://cdnjs.cloudflare.com/ajax/libs/dompurify/2.3.8/purify.min.js" 
      integrity="sha512-M72KfQy4kPuLYC6CeTrN0eA17U1lXEMrr5qEJC/40CLdZGC3HpwPS0esQLqBHnxty2FIcuNdP9EqwSOCLEVJXQ==" 
      crossorigin="anonymous" 
      referrerpolicy="no-referrer">
    </script>

    <script src="/rsa-clientdb.js"></script>
    <script>
        const form = document.querySelector('form')
        const username = document.querySelector('#username')
        const password = document.querySelector('#password')
        const display = document.querySelector('.error')

        let keys = null
        let publicKey = null

        // CSRF setup
        function rnd_32byte_string(){
          return CryptoJS.enc.Utf8.parse(CryptoJS.lib.WordArray.random(32)).toString(CryptoJS.enc.Utf8)
        }
        function generateCSRFToken() {
          let csrf = rnd_32byte_string()
          let max_age = 5*60 // 5 minutes

          // set cookie with csrf token
          document.cookie = "csrf=" + csrf + "; max-age=" + max_age + "; path=/; SameSite=Strict; Secure";
          // set value hidden form field to csrf
          document.getElementById("CSRFToken").value = csrf
          return csrf
        }

        // POST request
        async function performRequest() {
          generateCSRFToken();
          // perform request
          const res = await fetch('/api/auth/register', {
            method: 'POST',
            // sanitize against XSS attacks by replacing HTML tags
            body: JSON.stringify({username: DOMPurify.sanitize(username.value), 
                                  password: password.value,
                                  publicKey: publicKey, 
                                  csrf: document.getElementById("CSRFToken").value
                                }),
            headers: { 'Content-Type': 'application/json' },
            credentials: 'same-origin'
            })

            const data = await res.json()
            if(res.status === 400 || res.status === 401){
            return display.textContent = `${data.message}. ${data.error ? data.error : ''}`
            }
            // and redirect
            location.assign('/main')
        }

        // Submit
        form.addEventListener('submit', async (e) => {
          // check input lengths
          if (username.value.length < 1 || username.value.length > 30 || password.value.length < 8 || password.value.length > 30) {
            alert("Invalid input. Username should be between 1 and 30 (alphanumeric) characters long. Password should be at least 8 (alphanumeric) characters long.")
          }
          else {
            e.preventDefault()
            display.textContent = ''

            // process submit
            try {
              // check local client DB for keys
              callOnStore(function (store) {
                let getLocalDBkeys = store.get(username.value);
                getLocalDBkeys.onsuccess = async function() {
                  // if the local client DB does not have RSA keys
                  if (getLocalDBkeys.result == null) {
                    //create keys
                    keys = await generateRSAkeys()
                    publicKey = JSON.stringify(await exportCryptoKey(keys.publicKey))

                    // if request succeeds, store keys
                    callOnStore(function (store) {
                        let putKeys = store.put({id: username.value, keys: keys});
                    });

                    // perform request to server
                    await performRequest()
                  }
                  // if the local client DB has RSA keys
                  else {
                    // export public key from local client DB
                    console.log(getLocalDBkeys.result)
                    publicKey = JSON.stringify(await exportCryptoKey(getLocalDBkeys.result.keys.publicKey))

                    // perform request to server
                    await performRequest()
                  }
                }
              })

            } catch (err) {
              console.log(err.message)
            }
          }
        })
      </script>
    </div>
  </body>
</html>