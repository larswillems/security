<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="style.css">
    <link rel="stylesheet" href="styleLogin.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
    <title>Register Page</title>
  </head>
  <body>
    <div class="error"></div>
    <div class="sidebar"></div>
    <div class="content">
    <h1>Register Page</h1>
    <form>
      <div class="error" style="background-color: red;"></div>
      <br />
      <label for="username">Username</label><br />
      <input type="text" id="username" required /><br />
      <label for="password">Password</label><br />
      <input type="password" id="password" required /><br />
      <input type="submit" value="register" /><br />
    </form>
    <a href="/login">Already registered? Login</a>

    <script src="/rsa-clientdb.js"></script>
    <script>
        const form = document.querySelector('form')
        const username = document.querySelector('#username')
        const password = document.querySelector('#password')
        const display = document.querySelector('.error')

        let keys = null
        let publicKey = null

        async function performRequest() {
          // perform request
          const res = await fetch('/api/auth/register', {
            method: 'POST',
            // sanitize against XSS attacks by replacing HTML tags
            body: JSON.stringify({ username: username.value.replace(/</g, "&lt;").replace(/>/g, "&gt;"), 
                                  password: password.value.replace(/</g, "&lt;").replace(/>/g, "&gt;"),
                                  publicKey: publicKey
                                }),
            headers: { 'Content-Type': 'application/json' }
            })
            const data = await res.json()
            if(res.status === 400 || res.status === 401){
            return display.textContent = `${data.message}. ${data.error ? data.error : ''}`
            }

            // if request succeeds, store keys
            callOnStore(function (store) {
                let putKeys = store.put({id: username, keys: keys});
                putKeys.onsuccess = async function() {
                  console.log("Keys successfully stored.", keys)

                  // get
                  callOnStore(function (store) {
                    let getKeys = store.get(username);
                    getKeys.onsuccess = async function() {
                      console.log("Retrieved stored keys:", getKeys.result)
                    };
                  });
                };
            });
            // and redirect
            location.assign('/main')
        }

        // when form is being submitted:
        form.addEventListener('submit', async (e) => {
          e.preventDefault()
          display.textContent = ''

          // process submit
          try {
            // check local client DB for keys
            callOnStore(function (store) {
              let getLocalDBkeys = store.get(username.value);
              getLocalDBkeys.onsuccess = async function() {
                // if the local client DB does not have RSA keys
                if (getLocalDBkeys.result == null) {
                  //create keys
                  keys = await generateRSAkeys()
                  publicKey = JSON.stringify(await exportCryptoKey(keys.publicKey))
                  
                  // perform request to server
                  performRequest()
                }
                // if the local client DB has RSA keys
                else {
                  // export public key from local client DB
                  publicKey = await exportCryptoKey(getLocalDBdata.result.publicKey)

                  // perform request to server
                  performRequest()
                }
              }
            })

          } catch (err) {
            console.log(err.message)
          }

        })
      </script>
    </div>
  </body>
</html>